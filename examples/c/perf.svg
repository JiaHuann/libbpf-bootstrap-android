<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>register_kprobe (500,000 samples, 0.13%)</title><rect x="1183.7" y="277" width="1.6" height="15.0" fill="rgb(232,25,28)" rx="2" ry="2" />
<text  x="1186.70" y="287.5" ></text>
</g>
<g >
<title>insn_get_sib (250,000 samples, 0.07%)</title><rect x="1183.7" y="149" width="0.8" height="15.0" fill="rgb(238,155,52)" rx="2" ry="2" />
<text  x="1186.70" y="159.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (1,000,000 samples, 0.27%)</title><rect x="1112.1" y="421" width="3.1" height="15.0" fill="rgb(217,54,12)" rx="2" ry="2" />
<text  x="1115.07" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,250,000 samples, 2.74%)</title><rect x="1120.7" y="373" width="32.3" height="15.0" fill="rgb(228,7,23)" rx="2" ry="2" />
<text  x="1123.73" y="383.5" >do..</text>
</g>
<g >
<title>ringbuf_process_ring (6,500,000 samples, 1.73%)</title><rect x="1156.2" y="421" width="20.4" height="15.0" fill="rgb(230,175,14)" rx="2" ry="2" />
<text  x="1159.15" y="431.5" ></text>
</g>
<g >
<title>check_stack_object (250,000 samples, 0.07%)</title><rect x="150.1" y="277" width="0.8" height="15.0" fill="rgb(208,156,5)" rx="2" ry="2" />
<text  x="153.12" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,500,000 samples, 0.93%)</title><rect x="1026.3" y="405" width="11.0" height="15.0" fill="rgb(248,56,3)" rx="2" ry="2" />
<text  x="1029.26" y="415.5" ></text>
</g>
<g >
<title>clear_subpage (250,000 samples, 0.07%)</title><rect x="1035.7" y="277" width="0.8" height="15.0" fill="rgb(214,170,29)" rx="2" ry="2" />
<text  x="1038.71" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (500,000 samples, 0.13%)</title><rect x="258.0" y="261" width="1.5" height="15.0" fill="rgb(236,122,42)" rx="2" ry="2" />
<text  x="260.97" y="271.5" ></text>
</g>
<g >
<title>perf_trace_event_init (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="293" width="3.1" height="15.0" fill="rgb(221,171,6)" rx="2" ry="2" />
<text  x="1188.28" y="303.5" ></text>
</g>
<g >
<title>add_wait_queue (750,000 samples, 0.20%)</title><rect x="257.2" y="277" width="2.3" height="15.0" fill="rgb(229,165,1)" rx="2" ry="2" />
<text  x="260.18" y="287.5" ></text>
</g>
<g >
<title>ep_start_scan (250,000 samples, 0.07%)</title><rect x="1128.6" y="325" width="0.8" height="15.0" fill="rgb(231,149,25)" rx="2" ry="2" />
<text  x="1131.60" y="335.5" ></text>
</g>
<g >
<title>clear_page_erms (500,000 samples, 0.13%)</title><rect x="1109.7" y="117" width="1.6" height="15.0" fill="rgb(247,162,33)" rx="2" ry="2" />
<text  x="1112.71" y="127.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (1,000,000 samples, 0.27%)</title><rect x="15.5" y="405" width="3.2" height="15.0" fill="rgb(244,30,23)" rx="2" ry="2" />
<text  x="18.51" y="415.5" ></text>
</g>
<g >
<title>schedule (250,000 samples, 0.07%)</title><rect x="987.7" y="245" width="0.8" height="15.0" fill="rgb(246,137,31)" rx="2" ry="2" />
<text  x="990.69" y="255.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (3,000,000 samples, 0.80%)</title><rect x="165.1" y="261" width="9.4" height="15.0" fill="rgb(241,33,11)" rx="2" ry="2" />
<text  x="168.08" y="271.5" ></text>
</g>
<g >
<title>vfs_write (284,750,000 samples, 75.98%)</title><rect x="105.3" y="341" width="896.6" height="15.0" fill="rgb(224,212,28)" rx="2" ry="2" />
<text  x="108.25" y="351.5" >vfs_write</text>
</g>
<g >
<title>ftrace_rec_iter_next (500,000 samples, 0.13%)</title><rect x="1185.3" y="149" width="1.6" height="15.0" fill="rgb(209,2,44)" rx="2" ry="2" />
<text  x="1188.28" y="159.5" ></text>
</g>
<g >
<title>create_local_trace_kprobe (1,000,000 samples, 0.27%)</title><rect x="1182.1" y="293" width="3.2" height="15.0" fill="rgb(244,41,41)" rx="2" ry="2" />
<text  x="1185.13" y="303.5" ></text>
</g>
<g >
<title>[unknown] (1,000,000 samples, 0.27%)</title><rect x="10.8" y="405" width="3.1" height="15.0" fill="rgb(211,68,8)" rx="2" ry="2" />
<text  x="13.79" y="415.5" ></text>
</g>
<g >
<title>remove_wait_queue (250,000 samples, 0.07%)</title><rect x="352.4" y="277" width="0.8" height="15.0" fill="rgb(225,162,33)" rx="2" ry="2" />
<text  x="355.43" y="287.5" ></text>
</g>
<g >
<title>bpf_prog_load (250,000 samples, 0.07%)</title><rect x="1189.2" y="341" width="0.8" height="15.0" fill="rgb(239,64,42)" rx="2" ry="2" />
<text  x="1192.21" y="351.5" ></text>
</g>
<g >
<title>file_tty_write.isra.0 (277,000,000 samples, 73.92%)</title><rect x="124.1" y="309" width="872.3" height="15.0" fill="rgb(207,150,33)" rx="2" ry="2" />
<text  x="127.14" y="319.5" >file_tty_write.isra.0</text>
</g>
<g >
<title>ftrace_rec_iter_record (250,000 samples, 0.07%)</title><rect x="1186.9" y="149" width="0.7" height="15.0" fill="rgb(208,21,21)" rx="2" ry="2" />
<text  x="1189.85" y="159.5" ></text>
</g>
<g >
<title>perf_event_alloc (2,000,000 samples, 0.53%)</title><rect x="1182.1" y="357" width="6.3" height="15.0" fill="rgb(233,48,6)" rx="2" ry="2" />
<text  x="1185.13" y="367.5" ></text>
</g>
<g >
<title>ldsem_down_read (500,000 samples, 0.13%)</title><rect x="990.8" y="277" width="1.6" height="15.0" fill="rgb(208,130,43)" rx="2" ry="2" />
<text  x="993.84" y="287.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (250,000 samples, 0.07%)</title><rect x="88.7" y="389" width="0.8" height="15.0" fill="rgb(220,81,33)" rx="2" ry="2" />
<text  x="91.72" y="399.5" ></text>
</g>
<g >
<title>pty_write (1,250,000 samples, 0.33%)</title><rect x="260.3" y="261" width="4.0" height="15.0" fill="rgb(223,53,31)" rx="2" ry="2" />
<text  x="263.33" y="271.5" ></text>
</g>
<g >
<title>ringbuf_event_handler (750,000 samples, 0.20%)</title><rect x="1174.3" y="405" width="2.3" height="15.0" fill="rgb(213,205,46)" rx="2" ry="2" />
<text  x="1177.26" y="415.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (500,000 samples, 0.13%)</title><rect x="163.5" y="261" width="1.6" height="15.0" fill="rgb(248,163,16)" rx="2" ry="2" />
<text  x="166.50" y="271.5" ></text>
</g>
<g >
<title>__put_user_nocheck_8 (750,000 samples, 0.20%)</title><rect x="1149.9" y="309" width="2.3" height="15.0" fill="rgb(227,81,47)" rx="2" ry="2" />
<text  x="1152.85" y="319.5" ></text>
</g>
<g >
<title>__strlen_avx2 (250,000 samples, 0.07%)</title><rect x="10.8" y="389" width="0.8" height="15.0" fill="rgb(209,23,6)" rx="2" ry="2" />
<text  x="13.79" y="399.5" ></text>
</g>
<g >
<title>ftrace_modify_all_code (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="181" width="3.1" height="15.0" fill="rgb(216,222,29)" rx="2" ry="2" />
<text  x="1188.28" y="191.5" ></text>
</g>
<g >
<title>wait_woken (250,000 samples, 0.07%)</title><rect x="987.7" y="277" width="0.8" height="15.0" fill="rgb(222,9,17)" rx="2" ry="2" />
<text  x="990.69" y="287.5" ></text>
</g>
<g >
<title>perf_try_init_event (2,000,000 samples, 0.53%)</title><rect x="1182.1" y="341" width="6.3" height="15.0" fill="rgb(244,137,34)" rx="2" ry="2" />
<text  x="1185.13" y="351.5" ></text>
</g>
<g >
<title>pty_write_room (3,000,000 samples, 0.80%)</title><rect x="343.0" y="277" width="9.4" height="15.0" fill="rgb(221,131,44)" rx="2" ry="2" />
<text  x="345.98" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (750,000 samples, 0.20%)</title><rect x="1108.9" y="213" width="2.4" height="15.0" fill="rgb(210,104,12)" rx="2" ry="2" />
<text  x="1111.92" y="223.5" ></text>
</g>
<g >
<title>bpf_map_poll (250,000 samples, 0.07%)</title><rect x="1126.2" y="309" width="0.8" height="15.0" fill="rgb(233,224,26)" rx="2" ry="2" />
<text  x="1129.24" y="319.5" ></text>
</g>
<g >
<title>mutex_trylock (250,000 samples, 0.07%)</title><rect x="995.6" y="277" width="0.8" height="15.0" fill="rgb(213,222,22)" rx="2" ry="2" />
<text  x="998.56" y="287.5" ></text>
</g>
<g >
<title>mutex_unlock (250,000 samples, 0.07%)</title><rect x="1129.4" y="325" width="0.8" height="15.0" fill="rgb(207,124,45)" rx="2" ry="2" />
<text  x="1132.39" y="335.5" ></text>
</g>
<g >
<title>btf_type_size.isra.0 (500,000 samples, 0.13%)</title><rect x="1097.9" y="405" width="1.6" height="15.0" fill="rgb(221,83,54)" rx="2" ry="2" />
<text  x="1100.90" y="415.5" ></text>
</g>
<g >
<title>exc_page_fault (1,250,000 samples, 0.33%)</title><rect x="1033.3" y="373" width="4.0" height="15.0" fill="rgb(230,94,27)" rx="2" ry="2" />
<text  x="1036.35" y="383.5" ></text>
</g>
<g >
<title>down_read (1,500,000 samples, 0.40%)</title><rect x="323.3" y="277" width="4.7" height="15.0" fill="rgb(246,169,20)" rx="2" ry="2" />
<text  x="326.30" y="287.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (1,250,000 samples, 0.33%)</title><rect x="1124.7" y="325" width="3.9" height="15.0" fill="rgb(230,153,45)" rx="2" ry="2" />
<text  x="1127.66" y="335.5" ></text>
</g>
<g >
<title>security_file_permission (500,000 samples, 0.13%)</title><rect x="1000.3" y="325" width="1.6" height="15.0" fill="rgb(208,104,32)" rx="2" ry="2" />
<text  x="1003.29" y="335.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (250,000 samples, 0.07%)</title><rect x="1036.5" y="293" width="0.8" height="15.0" fill="rgb(212,188,7)" rx="2" ry="2" />
<text  x="1039.50" y="303.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1,750,000 samples, 0.47%)</title><rect x="1040.4" y="405" width="5.5" height="15.0" fill="rgb(221,190,16)" rx="2" ry="2" />
<text  x="1043.43" y="415.5" ></text>
</g>
<g >
<title>tty_hung_up_p (250,000 samples, 0.07%)</title><rect x="357.9" y="277" width="0.8" height="15.0" fill="rgb(206,12,0)" rx="2" ry="2" />
<text  x="360.94" y="287.5" ></text>
</g>
<g >
<title>__check_heap_object (1,000,000 samples, 0.27%)</title><rect x="136.0" y="277" width="3.1" height="15.0" fill="rgb(212,72,21)" rx="2" ry="2" />
<text  x="138.95" y="287.5" ></text>
</g>
<g >
<title>clear_page_erms (250,000 samples, 0.07%)</title><rect x="1035.7" y="261" width="0.8" height="15.0" fill="rgb(254,183,53)" rx="2" ry="2" />
<text  x="1038.71" y="271.5" ></text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (250,000 samples, 0.07%)</title><rect x="1035.7" y="309" width="0.8" height="15.0" fill="rgb(222,34,25)" rx="2" ry="2" />
<text  x="1038.71" y="319.5" ></text>
</g>
<g >
<title>insn_get_length (250,000 samples, 0.07%)</title><rect x="1183.7" y="197" width="0.8" height="15.0" fill="rgb(228,20,47)" rx="2" ry="2" />
<text  x="1186.70" y="207.5" ></text>
</g>
<g >
<title>arm_kprobe (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="245" width="3.1" height="15.0" fill="rgb(254,96,43)" rx="2" ry="2" />
<text  x="1188.28" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (500,000 samples, 0.13%)</title><rect x="379.2" y="261" width="1.6" height="15.0" fill="rgb(224,100,39)" rx="2" ry="2" />
<text  x="382.19" y="271.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (750,000 samples, 0.20%)</title><rect x="1115.2" y="421" width="2.4" height="15.0" fill="rgb(207,47,8)" rx="2" ry="2" />
<text  x="1118.22" y="431.5" ></text>
</g>
<g >
<title>hv_apic_read (250,000 samples, 0.07%)</title><rect x="1189.2" y="213" width="0.8" height="15.0" fill="rgb(243,87,48)" rx="2" ry="2" />
<text  x="1192.21" y="223.5" ></text>
</g>
<g >
<title>__sched_text_start (250,000 samples, 0.07%)</title><rect x="987.7" y="229" width="0.8" height="15.0" fill="rgb(224,102,23)" rx="2" ry="2" />
<text  x="990.69" y="239.5" ></text>
</g>
<g >
<title>clear_huge_page (500,000 samples, 0.13%)</title><rect x="1109.7" y="149" width="1.6" height="15.0" fill="rgb(213,19,21)" rx="2" ry="2" />
<text  x="1112.71" y="159.5" ></text>
</g>
<g >
<title>_copy_to_iter (2,750,000 samples, 0.73%)</title><rect x="1102.6" y="293" width="8.7" height="15.0" fill="rgb(252,81,49)" rx="2" ry="2" />
<text  x="1105.62" y="303.5" ></text>
</g>
<g >
<title>vfs_read (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="341" width="9.5" height="15.0" fill="rgb(213,132,38)" rx="2" ry="2" />
<text  x="1105.62" y="351.5" ></text>
</g>
<g >
<title>__close (250,000 samples, 0.07%)</title><rect x="1117.6" y="421" width="0.8" height="15.0" fill="rgb(229,61,32)" rx="2" ry="2" />
<text  x="1120.58" y="431.5" ></text>
</g>
<g >
<title>ftrace_update_ftrace_func (250,000 samples, 0.07%)</title><rect x="1187.6" y="165" width="0.8" height="15.0" fill="rgb(235,104,36)" rx="2" ry="2" />
<text  x="1190.64" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,250,000 samples, 2.74%)</title><rect x="1120.7" y="389" width="32.3" height="15.0" fill="rgb(213,1,6)" rx="2" ry="2" />
<text  x="1123.73" y="399.5" >en..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (250,000 samples, 0.07%)</title><rect x="1117.6" y="405" width="0.8" height="15.0" fill="rgb(245,118,10)" rx="2" ry="2" />
<text  x="1120.58" y="415.5" ></text>
</g>
<g >
<title>do_epoll_wait (4,250,000 samples, 1.13%)</title><rect x="1120.7" y="341" width="13.4" height="15.0" fill="rgb(232,67,42)" rx="2" ry="2" />
<text  x="1123.73" y="351.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (250,000 samples, 0.07%)</title><rect x="1187.6" y="101" width="0.8" height="15.0" fill="rgb(249,10,32)" rx="2" ry="2" />
<text  x="1190.64" y="111.5" ></text>
</g>
<g >
<title>get_page_from_freelist (250,000 samples, 0.07%)</title><rect x="1034.9" y="293" width="0.8" height="15.0" fill="rgb(208,156,22)" rx="2" ry="2" />
<text  x="1037.92" y="303.5" ></text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5 (500,000 samples, 0.13%)</title><rect x="13.9" y="405" width="1.6" height="15.0" fill="rgb(221,170,15)" rx="2" ry="2" />
<text  x="16.94" y="415.5" ></text>
</g>
<g >
<title>tty_write_lock (500,000 samples, 0.13%)</title><rect x="994.8" y="293" width="1.6" height="15.0" fill="rgb(254,104,16)" rx="2" ry="2" />
<text  x="997.78" y="303.5" ></text>
</g>
<g >
<title>text_poke_bp (250,000 samples, 0.07%)</title><rect x="1187.6" y="149" width="0.8" height="15.0" fill="rgb(239,7,12)" rx="2" ry="2" />
<text  x="1190.64" y="159.5" ></text>
</g>
<g >
<title>mem_cgroup_handle_over_high (250,000 samples, 0.07%)</title><rect x="1152.2" y="325" width="0.8" height="15.0" fill="rgb(218,223,17)" rx="2" ry="2" />
<text  x="1155.21" y="335.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1,000,000 samples, 0.27%)</title><rect x="1131.0" y="325" width="3.1" height="15.0" fill="rgb(233,170,47)" rx="2" ry="2" />
<text  x="1133.96" y="335.5" ></text>
</g>
<g >
<title>perf_output_put_handle (250,000 samples, 0.07%)</title><rect x="1189.2" y="261" width="0.8" height="15.0" fill="rgb(232,53,21)" rx="2" ry="2" />
<text  x="1192.21" y="271.5" ></text>
</g>
<g >
<title>ldsem_up_read (250,000 samples, 0.07%)</title><rect x="176.9" y="293" width="0.8" height="15.0" fill="rgb(230,151,39)" rx="2" ry="2" />
<text  x="179.88" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.07%)</title><rect x="10.0" y="405" width="0.8" height="15.0" fill="rgb(230,109,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (250,000 samples, 0.07%)</title><rect x="1123.1" y="325" width="0.8" height="15.0" fill="rgb(209,17,12)" rx="2" ry="2" />
<text  x="1126.09" y="335.5" ></text>
</g>
<g >
<title>[unknown] (350,000,000 samples, 93.40%)</title><rect x="10.0" y="421" width="1102.1" height="15.0" fill="rgb(254,46,30)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >[unknown]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,750,000 samples, 0.47%)</title><rect x="1176.6" y="405" width="5.5" height="15.0" fill="rgb(249,89,18)" rx="2" ry="2" />
<text  x="1179.62" y="415.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (750,000 samples, 0.20%)</title><rect x="282.4" y="245" width="2.3" height="15.0" fill="rgb(205,1,33)" rx="2" ry="2" />
<text  x="285.37" y="255.5" ></text>
</g>
<g >
<title>kallsyms_expand_symbol.constprop.0 (500,000 samples, 0.13%)</title><rect x="1182.1" y="229" width="1.6" height="15.0" fill="rgb(211,190,34)" rx="2" ry="2" />
<text  x="1185.13" y="239.5" ></text>
</g>
<g >
<title>ktime_get_real_seconds (750,000 samples, 0.20%)</title><rect x="174.5" y="293" width="2.4" height="15.0" fill="rgb(219,190,11)" rx="2" ry="2" />
<text  x="177.52" y="303.5" ></text>
</g>
<g >
<title>perf_kprobe_init (2,000,000 samples, 0.53%)</title><rect x="1182.1" y="309" width="6.3" height="15.0" fill="rgb(252,69,54)" rx="2" ry="2" />
<text  x="1185.13" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_write (303,000,000 samples, 80.85%)</title><rect x="72.2" y="405" width="954.1" height="15.0" fill="rgb(215,169,17)" rx="2" ry="2" />
<text  x="75.19" y="415.5" >__GI___libc_write</text>
</g>
<g >
<title>mutex_unlock (1,500,000 samples, 0.40%)</title><rect x="329.6" y="277" width="4.7" height="15.0" fill="rgb(237,192,26)" rx="2" ry="2" />
<text  x="332.60" y="287.5" ></text>
</g>
<g >
<title>insn_get_displacement (250,000 samples, 0.07%)</title><rect x="1183.7" y="165" width="0.8" height="15.0" fill="rgb(208,89,22)" rx="2" ry="2" />
<text  x="1186.70" y="175.5" ></text>
</g>
<g >
<title>irq_work_queue (250,000 samples, 0.07%)</title><rect x="1189.2" y="245" width="0.8" height="15.0" fill="rgb(208,1,21)" rx="2" ry="2" />
<text  x="1192.21" y="255.5" ></text>
</g>
<g >
<title>kallsyms_lookup_name (250,000 samples, 0.07%)</title><rect x="1184.5" y="245" width="0.8" height="15.0" fill="rgb(231,56,28)" rx="2" ry="2" />
<text  x="1187.49" y="255.5" ></text>
</g>
<g >
<title>bpf_core_add_cands (500,000 samples, 0.13%)</title><rect x="11.6" y="389" width="1.5" height="15.0" fill="rgb(253,186,5)" rx="2" ry="2" />
<text  x="14.57" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (297,500,000 samples, 79.39%)</title><rect x="89.5" y="373" width="936.8" height="15.0" fill="rgb(241,165,50)" rx="2" ry="2" />
<text  x="92.51" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>kprobe_addr (250,000 samples, 0.07%)</title><rect x="1184.5" y="261" width="0.8" height="15.0" fill="rgb(222,171,29)" rx="2" ry="2" />
<text  x="1187.49" y="271.5" ></text>
</g>
<g >
<title>all (374,750,000 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(216,151,52)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,500,000 samples, 0.67%)</title><rect x="1182.1" y="405" width="7.9" height="15.0" fill="rgb(212,5,19)" rx="2" ry="2" />
<text  x="1185.13" y="415.5" ></text>
</g>
<g >
<title>new_sync_read (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="325" width="9.5" height="15.0" fill="rgb(237,19,6)" rx="2" ry="2" />
<text  x="1105.62" y="335.5" ></text>
</g>
<g >
<title>copyout (2,750,000 samples, 0.73%)</title><rect x="1102.6" y="277" width="8.7" height="15.0" fill="rgb(220,217,18)" rx="2" ry="2" />
<text  x="1105.62" y="287.5" ></text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (500,000 samples, 0.13%)</title><rect x="1109.7" y="165" width="1.6" height="15.0" fill="rgb(253,68,30)" rx="2" ry="2" />
<text  x="1112.71" y="175.5" ></text>
</g>
<g >
<title>__send_ipi_mask (250,000 samples, 0.07%)</title><rect x="1187.6" y="69" width="0.8" height="15.0" fill="rgb(253,84,2)" rx="2" ry="2" />
<text  x="1190.64" y="79.5" ></text>
</g>
<g >
<title>ringbuf_map_poll (500,000 samples, 0.13%)</title><rect x="1127.0" y="309" width="1.6" height="15.0" fill="rgb(205,216,37)" rx="2" ry="2" />
<text  x="1130.02" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (297,500,000 samples, 79.39%)</title><rect x="89.5" y="389" width="936.8" height="15.0" fill="rgb(210,0,8)" rx="2" ry="2" />
<text  x="92.51" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>native_apic_wait_icr_idle (250,000 samples, 0.07%)</title><rect x="1189.2" y="229" width="0.8" height="15.0" fill="rgb(253,4,5)" rx="2" ry="2" />
<text  x="1192.21" y="239.5" ></text>
</g>
<g >
<title>tty_paranoia_check (750,000 samples, 0.20%)</title><rect x="992.4" y="293" width="2.4" height="15.0" fill="rgb(249,52,22)" rx="2" ry="2" />
<text  x="995.41" y="303.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (5,750,000 samples, 1.53%)</title><rect x="1134.9" y="357" width="18.1" height="15.0" fill="rgb(227,12,47)" rx="2" ry="2" />
<text  x="1137.90" y="367.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (199,000,000 samples, 53.10%)</title><rect x="358.7" y="277" width="626.6" height="15.0" fill="rgb(224,167,18)" rx="2" ry="2" />
<text  x="361.73" y="287.5" >tty_insert_flip_string_and_push_buffer</text>
</g>
<g >
<title>perf_kprobe_event_init (2,000,000 samples, 0.53%)</title><rect x="1182.1" y="325" width="6.3" height="15.0" fill="rgb(229,8,36)" rx="2" ry="2" />
<text  x="1185.13" y="335.5" ></text>
</g>
<g >
<title>_IO_file_xsputn@@GLIBC_2.2.5 (14,000,000 samples, 3.74%)</title><rect x="27.3" y="405" width="44.1" height="15.0" fill="rgb(211,130,12)" rx="2" ry="2" />
<text  x="30.32" y="415.5" >_IO_..</text>
</g>
<g >
<title>perf_event_bpf_event (250,000 samples, 0.07%)</title><rect x="1189.2" y="325" width="0.8" height="15.0" fill="rgb(221,85,14)" rx="2" ry="2" />
<text  x="1192.21" y="335.5" ></text>
</g>
<g >
<title>ksys_read (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="357" width="9.5" height="15.0" fill="rgb(245,120,21)" rx="2" ry="2" />
<text  x="1105.62" y="367.5" ></text>
</g>
<g >
<title>__sys_bpf (500,000 samples, 0.13%)</title><rect x="1188.4" y="357" width="1.6" height="15.0" fill="rgb(206,221,17)" rx="2" ry="2" />
<text  x="1191.43" y="367.5" ></text>
</g>
<g >
<title>__jump_label_text_reserved (250,000 samples, 0.07%)</title><rect x="1183.7" y="245" width="0.8" height="15.0" fill="rgb(210,114,52)" rx="2" ry="2" />
<text  x="1186.70" y="255.5" ></text>
</g>
<g >
<title>_dl_relocate_object (250,000 samples, 0.07%)</title><rect x="1086.9" y="373" width="0.8" height="15.0" fill="rgb(211,31,0)" rx="2" ry="2" />
<text  x="1089.88" y="383.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (250,000 samples, 0.07%)</title><rect x="1134.1" y="357" width="0.8" height="15.0" fill="rgb(247,122,30)" rx="2" ry="2" />
<text  x="1137.11" y="367.5" ></text>
</g>
<g >
<title>ftrace_startup (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="213" width="3.1" height="15.0" fill="rgb(232,32,12)" rx="2" ry="2" />
<text  x="1188.28" y="223.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (250,000 samples, 0.07%)</title><rect x="1130.2" y="325" width="0.8" height="15.0" fill="rgb(222,220,2)" rx="2" ry="2" />
<text  x="1133.17" y="335.5" ></text>
</g>
<g >
<title>__fget_light (500,000 samples, 0.13%)</title><rect x="1121.5" y="325" width="1.6" height="15.0" fill="rgb(222,24,9)" rx="2" ry="2" />
<text  x="1124.51" y="335.5" ></text>
</g>
<g >
<title>copyin (3,750,000 samples, 1.00%)</title><rect x="162.7" y="277" width="11.8" height="15.0" fill="rgb(216,138,22)" rx="2" ry="2" />
<text  x="165.72" y="287.5" ></text>
</g>
<g >
<title>schedule (1,000,000 samples, 0.27%)</title><rect x="1131.0" y="309" width="3.1" height="15.0" fill="rgb(216,227,26)" rx="2" ry="2" />
<text  x="1133.96" y="319.5" ></text>
</g>
<g >
<title>__fdget_pos (2,500,000 samples, 0.67%)</title><rect x="97.4" y="341" width="7.9" height="15.0" fill="rgb(252,154,47)" rx="2" ry="2" />
<text  x="100.38" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (750,000 samples, 0.20%)</title><rect x="1108.9" y="197" width="2.4" height="15.0" fill="rgb(213,64,13)" rx="2" ry="2" />
<text  x="1111.92" y="207.5" ></text>
</g>
<g >
<title>clear_page_erms (250,000 samples, 0.07%)</title><rect x="1034.9" y="245" width="0.8" height="15.0" fill="rgb(242,222,20)" rx="2" ry="2" />
<text  x="1037.92" y="255.5" ></text>
</g>
<g >
<title>__do_sys_perf_event_open (2,000,000 samples, 0.53%)</title><rect x="1182.1" y="373" width="6.3" height="15.0" fill="rgb(208,83,29)" rx="2" ry="2" />
<text  x="1185.13" y="383.5" ></text>
</g>
<g >
<title>memcpy_erms (250,000 samples, 0.07%)</title><rect x="1111.3" y="277" width="0.8" height="15.0" fill="rgb(208,129,48)" rx="2" ry="2" />
<text  x="1114.28" y="287.5" ></text>
</g>
<g >
<title>__virt_addr_valid (3,500,000 samples, 0.93%)</title><rect x="139.1" y="277" width="11.0" height="15.0" fill="rgb(230,15,8)" rx="2" ry="2" />
<text  x="142.10" y="287.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2,750,000 samples, 0.73%)</title><rect x="1102.6" y="261" width="8.7" height="15.0" fill="rgb(234,89,21)" rx="2" ry="2" />
<text  x="1105.62" y="271.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2,500,000 samples, 0.67%)</title><rect x="150.9" y="293" width="7.9" height="15.0" fill="rgb(237,135,14)" rx="2" ry="2" />
<text  x="153.91" y="303.5" ></text>
</g>
<g >
<title>read (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="405" width="9.5" height="15.0" fill="rgb(207,132,48)" rx="2" ry="2" />
<text  x="1105.62" y="415.5" ></text>
</g>
<g >
<title>ringbuf_event_handler (1,000,000 samples, 0.27%)</title><rect x="1153.0" y="421" width="3.2" height="15.0" fill="rgb(234,41,27)" rx="2" ry="2" />
<text  x="1156.00" y="431.5" ></text>
</g>
<g >
<title>__check_object_size (4,750,000 samples, 1.27%)</title><rect x="136.0" y="293" width="14.9" height="15.0" fill="rgb(213,191,16)" rx="2" ry="2" />
<text  x="138.95" y="303.5" ></text>
</g>
<g >
<title>perf_event_bpf_output (250,000 samples, 0.07%)</title><rect x="1189.2" y="293" width="0.8" height="15.0" fill="rgb(208,75,5)" rx="2" ry="2" />
<text  x="1192.21" y="303.5" ></text>
</g>
<g >
<title>__register_trace_kprobe (500,000 samples, 0.13%)</title><rect x="1182.1" y="277" width="1.6" height="15.0" fill="rgb(230,31,50)" rx="2" ry="2" />
<text  x="1185.13" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_cleanup_pop_restore (250,000 samples, 0.07%)</title><rect x="71.4" y="405" width="0.8" height="15.0" fill="rgb(210,88,2)" rx="2" ry="2" />
<text  x="74.40" y="415.5" ></text>
</g>
<g >
<title>prep_new_page (250,000 samples, 0.07%)</title><rect x="1034.9" y="277" width="0.8" height="15.0" fill="rgb(246,129,19)" rx="2" ry="2" />
<text  x="1037.92" y="287.5" ></text>
</g>
<g >
<title>queue_work_on (192,000,000 samples, 51.23%)</title><rect x="380.8" y="261" width="604.5" height="15.0" fill="rgb(205,27,46)" rx="2" ry="2" />
<text  x="383.77" y="271.5" >queue_work_on</text>
</g>
<g >
<title>__get_user_8 (500,000 samples, 0.13%)</title><rect x="1148.3" y="309" width="1.6" height="15.0" fill="rgb(225,134,21)" rx="2" ry="2" />
<text  x="1151.28" y="319.5" ></text>
</g>
<g >
<title>do_output_char (20,250,000 samples, 5.40%)</title><rect x="259.5" y="277" width="63.8" height="15.0" fill="rgb(248,128,54)" rx="2" ry="2" />
<text  x="262.54" y="287.5" >do_outp..</text>
</g>
<g >
<title>queue_work_on (12,250,000 samples, 3.27%)</title><rect x="284.7" y="245" width="38.6" height="15.0" fill="rgb(211,26,19)" rx="2" ry="2" />
<text  x="287.73" y="255.5" >que..</text>
</g>
<g >
<title>bpf_core_essential_name_len (250,000 samples, 0.07%)</title><rect x="13.1" y="389" width="0.8" height="15.0" fill="rgb(226,83,14)" rx="2" ry="2" />
<text  x="16.15" y="399.5" ></text>
</g>
<g >
<title>hv_send_ipi_mask_allbutself (250,000 samples, 0.07%)</title><rect x="1187.6" y="85" width="0.8" height="15.0" fill="rgb(230,81,50)" rx="2" ry="2" />
<text  x="1190.64" y="95.5" ></text>
</g>
<g >
<title>process_echoes (750,000 samples, 0.20%)</title><rect x="334.3" y="277" width="2.4" height="15.0" fill="rgb(220,56,25)" rx="2" ry="2" />
<text  x="337.32" y="287.5" ></text>
</g>
<g >
<title>perf_iterate_sb (250,000 samples, 0.07%)</title><rect x="1189.2" y="309" width="0.8" height="15.0" fill="rgb(248,79,54)" rx="2" ry="2" />
<text  x="1192.21" y="319.5" ></text>
</g>
<g >
<title>enable_kprobe (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="261" width="3.1" height="15.0" fill="rgb(217,33,0)" rx="2" ry="2" />
<text  x="1188.28" y="271.5" ></text>
</g>
<g >
<title>_itoa_word (3,250,000 samples, 0.87%)</title><rect x="1087.7" y="405" width="10.2" height="15.0" fill="rgb(227,147,32)" rx="2" ry="2" />
<text  x="1090.67" y="415.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (2,750,000 samples, 0.73%)</title><rect x="18.7" y="405" width="8.6" height="15.0" fill="rgb(233,193,38)" rx="2" ry="2" />
<text  x="21.66" y="415.5" ></text>
</g>
<g >
<title>ksys_write (288,250,000 samples, 76.92%)</title><rect x="94.2" y="357" width="907.7" height="15.0" fill="rgb(248,205,24)" rx="2" ry="2" />
<text  x="97.23" y="367.5" >ksys_write</text>
</g>
<g >
<title>_dl_sysdep_start (250,000 samples, 0.07%)</title><rect x="1086.9" y="405" width="0.8" height="15.0" fill="rgb(212,151,28)" rx="2" ry="2" />
<text  x="1089.88" y="415.5" ></text>
</g>
<g >
<title>__put_user_nocheck_8 (250,000 samples, 0.07%)</title><rect x="1123.9" y="325" width="0.8" height="15.0" fill="rgb(207,9,42)" rx="2" ry="2" />
<text  x="1126.88" y="335.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (5,250,000 samples, 1.40%)</title><rect x="1136.5" y="341" width="16.5" height="15.0" fill="rgb(238,124,11)" rx="2" ry="2" />
<text  x="1139.47" y="351.5" ></text>
</g>
<g >
<title>new_sync_write (280,250,000 samples, 74.78%)</title><rect x="117.8" y="325" width="882.5" height="15.0" fill="rgb(207,107,1)" rx="2" ry="2" />
<text  x="120.85" y="335.5" >new_sync_write</text>
</g>
<g >
<title>text_poke_bp_batch (250,000 samples, 0.07%)</title><rect x="1187.6" y="133" width="0.8" height="15.0" fill="rgb(214,112,17)" rx="2" ry="2" />
<text  x="1190.64" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,250,000 samples, 0.33%)</title><rect x="1033.3" y="389" width="4.0" height="15.0" fill="rgb(240,123,30)" rx="2" ry="2" />
<text  x="1036.35" y="399.5" ></text>
</g>
<g >
<title>__sched_text_start (1,000,000 samples, 0.27%)</title><rect x="1131.0" y="293" width="3.1" height="15.0" fill="rgb(206,113,39)" rx="2" ry="2" />
<text  x="1133.96" y="303.5" ></text>
</g>
<g >
<title>epoll_wait (11,000,000 samples, 2.94%)</title><rect x="1118.4" y="405" width="34.6" height="15.0" fill="rgb(225,156,42)" rx="2" ry="2" />
<text  x="1121.37" y="415.5" >ep..</text>
</g>
<g >
<title>tty_ldisc_ref_wait (750,000 samples, 0.20%)</title><rect x="990.1" y="293" width="2.3" height="15.0" fill="rgb(244,132,53)" rx="2" ry="2" />
<text  x="993.05" y="303.5" ></text>
</g>
<g >
<title>printf (1,250,000 samples, 0.33%)</title><rect x="1170.3" y="405" width="4.0" height="15.0" fill="rgb(229,144,46)" rx="2" ry="2" />
<text  x="1173.32" y="415.5" ></text>
</g>
<g >
<title>ftrace_replace_code (750,000 samples, 0.20%)</title><rect x="1185.3" y="165" width="2.3" height="15.0" fill="rgb(218,19,12)" rx="2" ry="2" />
<text  x="1188.28" y="175.5" ></text>
</g>
<g >
<title>tty_write (1,250,000 samples, 0.33%)</title><rect x="996.4" y="309" width="3.9" height="15.0" fill="rgb(242,103,22)" rx="2" ry="2" />
<text  x="999.35" y="319.5" ></text>
</g>
<g >
<title>insn_get_opcode (250,000 samples, 0.07%)</title><rect x="1183.7" y="117" width="0.8" height="15.0" fill="rgb(214,189,46)" rx="2" ry="2" />
<text  x="1186.70" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (500,000 samples, 0.13%)</title><rect x="1188.4" y="373" width="1.6" height="15.0" fill="rgb(224,169,2)" rx="2" ry="2" />
<text  x="1191.43" y="383.5" ></text>
</g>
<g >
<title>_copy_from_iter (5,000,000 samples, 1.33%)</title><rect x="158.8" y="293" width="15.7" height="15.0" fill="rgb(244,108,8)" rx="2" ry="2" />
<text  x="161.78" y="303.5" ></text>
</g>
<g >
<title>syscall (4,250,000 samples, 1.13%)</title><rect x="1176.6" y="421" width="13.4" height="15.0" fill="rgb(205,104,17)" rx="2" ry="2" />
<text  x="1179.62" y="431.5" ></text>
</g>
<g >
<title>enable_trace_kprobe (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="277" width="3.1" height="15.0" fill="rgb(242,192,54)" rx="2" ry="2" />
<text  x="1188.28" y="287.5" ></text>
</g>
<g >
<title>__rseq_handle_notify_resume (3,250,000 samples, 0.87%)</title><rect x="1142.0" y="325" width="10.2" height="15.0" fill="rgb(245,10,13)" rx="2" ry="2" />
<text  x="1144.98" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages (250,000 samples, 0.07%)</title><rect x="1034.9" y="309" width="0.8" height="15.0" fill="rgb(216,124,17)" rx="2" ry="2" />
<text  x="1037.92" y="319.5" ></text>
</g>
<g >
<title>__vfprintf_internal (13,000,000 samples, 3.47%)</title><rect x="1045.9" y="405" width="41.0" height="15.0" fill="rgb(253,166,14)" rx="2" ry="2" />
<text  x="1048.94" y="415.5" >__v..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (750,000 samples, 0.20%)</title><rect x="1023.9" y="357" width="2.4" height="15.0" fill="rgb(215,156,52)" rx="2" ry="2" />
<text  x="1026.90" y="367.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,250,000 samples, 0.33%)</title><rect x="1033.3" y="357" width="4.0" height="15.0" fill="rgb(228,36,18)" rx="2" ry="2" />
<text  x="1036.35" y="367.5" ></text>
</g>
<g >
<title>up_read (750,000 samples, 0.20%)</title><rect x="985.3" y="277" width="2.4" height="15.0" fill="rgb(234,29,19)" rx="2" ry="2" />
<text  x="988.33" y="287.5" ></text>
</g>
<g >
<title>kernfs_fop_read_iter (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="309" width="9.5" height="15.0" fill="rgb(229,146,6)" rx="2" ry="2" />
<text  x="1105.62" y="319.5" ></text>
</g>
<g >
<title>insn_get_modrm (250,000 samples, 0.07%)</title><rect x="1183.7" y="133" width="0.8" height="15.0" fill="rgb(205,147,34)" rx="2" ry="2" />
<text  x="1186.70" y="143.5" ></text>
</g>
<g >
<title>syscall (250,000 samples, 0.07%)</title><rect x="1101.8" y="389" width="0.8" height="15.0" fill="rgb(216,33,51)" rx="2" ry="2" />
<text  x="1104.83" y="399.5" ></text>
</g>
<g >
<title>cpumask_next (250,000 samples, 0.07%)</title><rect x="1187.6" y="53" width="0.8" height="15.0" fill="rgb(247,172,19)" rx="2" ry="2" />
<text  x="1190.64" y="63.5" ></text>
</g>
<g >
<title>within_notrace_func (500,000 samples, 0.13%)</title><rect x="1182.1" y="261" width="1.6" height="15.0" fill="rgb(218,225,25)" rx="2" ry="2" />
<text  x="1185.13" y="271.5" ></text>
</g>
<g >
<title>clear_subpage (500,000 samples, 0.13%)</title><rect x="1109.7" y="133" width="1.6" height="15.0" fill="rgb(243,19,15)" rx="2" ry="2" />
<text  x="1112.71" y="143.5" ></text>
</g>
<g >
<title>probe_memcg_account (250,000 samples, 0.07%)</title><rect x="1101.8" y="405" width="0.8" height="15.0" fill="rgb(249,171,1)" rx="2" ry="2" />
<text  x="1104.83" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (750,000 samples, 0.20%)</title><rect x="1034.9" y="325" width="2.4" height="15.0" fill="rgb(238,132,4)" rx="2" ry="2" />
<text  x="1037.92" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (4,250,000 samples, 1.13%)</title><rect x="1120.7" y="357" width="13.4" height="15.0" fill="rgb(213,52,2)" rx="2" ry="2" />
<text  x="1123.73" y="367.5" ></text>
</g>
<g >
<title>myringbuffer (374,750,000 samples, 100.00%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(240,144,0)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >myringbuffer</text>
</g>
<g >
<title>btf_vmlinux_read (250,000 samples, 0.07%)</title><rect x="1111.3" y="293" width="0.8" height="15.0" fill="rgb(230,88,10)" rx="2" ry="2" />
<text  x="1114.28" y="303.5" ></text>
</g>
<g >
<title>finish_task_switch (750,000 samples, 0.20%)</title><rect x="1131.7" y="277" width="2.4" height="15.0" fill="rgb(224,37,30)" rx="2" ry="2" />
<text  x="1134.75" y="287.5" ></text>
</g>
<g >
<title>clear_huge_page (250,000 samples, 0.07%)</title><rect x="1035.7" y="293" width="0.8" height="15.0" fill="rgb(217,143,8)" rx="2" ry="2" />
<text  x="1038.71" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (250,000 samples, 0.07%)</title><rect x="1101.8" y="373" width="0.8" height="15.0" fill="rgb(208,49,39)" rx="2" ry="2" />
<text  x="1104.83" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="373" width="9.5" height="15.0" fill="rgb(228,75,46)" rx="2" ry="2" />
<text  x="1105.62" y="383.5" ></text>
</g>
<g >
<title>insn_get_immediate (250,000 samples, 0.07%)</title><rect x="1183.7" y="181" width="0.8" height="15.0" fill="rgb(208,183,13)" rx="2" ry="2" />
<text  x="1186.70" y="191.5" ></text>
</g>
<g >
<title>perf_output_end (250,000 samples, 0.07%)</title><rect x="1189.2" y="277" width="0.8" height="15.0" fill="rgb(213,89,29)" rx="2" ry="2" />
<text  x="1192.21" y="287.5" ></text>
</g>
<g >
<title>__libc_start_call_main (11,000,000 samples, 2.94%)</title><rect x="1118.4" y="421" width="34.6" height="15.0" fill="rgb(230,222,33)" rx="2" ry="2" />
<text  x="1121.37" y="431.5" >__..</text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (18,750,000 samples, 5.00%)</title><rect x="264.3" y="261" width="59.0" height="15.0" fill="rgb(246,0,11)" rx="2" ry="2" />
<text  x="267.26" y="271.5" >tty_in..</text>
</g>
<g >
<title>schedule_timeout (250,000 samples, 0.07%)</title><rect x="987.7" y="261" width="0.8" height="15.0" fill="rgb(252,16,53)" rx="2" ry="2" />
<text  x="990.69" y="271.5" ></text>
</g>
<g >
<title>tty_ldisc_deref (500,000 samples, 0.13%)</title><rect x="988.5" y="293" width="1.6" height="15.0" fill="rgb(224,26,19)" rx="2" ry="2" />
<text  x="991.48" y="303.5" ></text>
</g>
<g >
<title>insn_decode (250,000 samples, 0.07%)</title><rect x="1183.7" y="213" width="0.8" height="15.0" fill="rgb(252,155,35)" rx="2" ry="2" />
<text  x="1186.70" y="223.5" ></text>
</g>
<g >
<title>kernel_init_free_pages.part.0 (250,000 samples, 0.07%)</title><rect x="1034.9" y="261" width="0.8" height="15.0" fill="rgb(242,88,8)" rx="2" ry="2" />
<text  x="1037.92" y="271.5" ></text>
</g>
<g >
<title>dl_main (250,000 samples, 0.07%)</title><rect x="1086.9" y="389" width="0.8" height="15.0" fill="rgb(252,220,53)" rx="2" ry="2" />
<text  x="1089.88" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (500,000 samples, 0.13%)</title><rect x="1109.7" y="181" width="1.6" height="15.0" fill="rgb(211,13,48)" rx="2" ry="2" />
<text  x="1112.71" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_write (750,000 samples, 0.20%)</title><rect x="91.9" y="357" width="2.3" height="15.0" fill="rgb(232,109,17)" rx="2" ry="2" />
<text  x="94.87" y="367.5" ></text>
</g>
<g >
<title>__mempcpy_avx_unaligned_erms (1,000,000 samples, 0.27%)</title><rect x="1037.3" y="405" width="3.1" height="15.0" fill="rgb(227,105,33)" rx="2" ry="2" />
<text  x="1040.28" y="415.5" ></text>
</g>
<g >
<title>kallsyms_lookup_name (500,000 samples, 0.13%)</title><rect x="1182.1" y="245" width="1.6" height="15.0" fill="rgb(229,140,41)" rx="2" ry="2" />
<text  x="1185.13" y="255.5" ></text>
</g>
<g >
<title>tty_buffer_space_avail (1,500,000 samples, 0.40%)</title><rect x="353.2" y="277" width="4.7" height="15.0" fill="rgb(254,162,20)" rx="2" ry="2" />
<text  x="356.22" y="287.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (250,000 samples, 0.07%)</title><rect x="1187.6" y="117" width="0.8" height="15.0" fill="rgb(231,221,35)" rx="2" ry="2" />
<text  x="1190.64" y="127.5" ></text>
</g>
<g >
<title>_find_next_bit (250,000 samples, 0.07%)</title><rect x="1187.6" y="37" width="0.8" height="15.0" fill="rgb(219,183,52)" rx="2" ry="2" />
<text  x="1190.64" y="47.5" ></text>
</g>
<g >
<title>handle_mm_fault (750,000 samples, 0.20%)</title><rect x="1034.9" y="341" width="2.4" height="15.0" fill="rgb(233,23,34)" rx="2" ry="2" />
<text  x="1037.92" y="351.5" ></text>
</g>
<g >
<title>insn_get_prefixes.part.0 (250,000 samples, 0.07%)</title><rect x="1183.7" y="101" width="0.8" height="15.0" fill="rgb(205,84,36)" rx="2" ry="2" />
<text  x="1186.70" y="111.5" ></text>
</g>
<g >
<title>exc_page_fault (750,000 samples, 0.20%)</title><rect x="1108.9" y="229" width="2.4" height="15.0" fill="rgb(241,34,45)" rx="2" ry="2" />
<text  x="1111.92" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,500,000 samples, 0.67%)</title><rect x="1182.1" y="389" width="7.9" height="15.0" fill="rgb(250,198,14)" rx="2" ry="2" />
<text  x="1185.13" y="399.5" ></text>
</g>
<g >
<title>mutex_lock (500,000 samples, 0.13%)</title><rect x="328.0" y="277" width="1.6" height="15.0" fill="rgb(214,36,45)" rx="2" ry="2" />
<text  x="331.03" y="287.5" ></text>
</g>
<g >
<title>arch_jump_entry_size (250,000 samples, 0.07%)</title><rect x="1183.7" y="229" width="0.8" height="15.0" fill="rgb(224,61,28)" rx="2" ry="2" />
<text  x="1186.70" y="239.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (750,000 samples, 0.20%)</title><rect x="1108.9" y="245" width="2.4" height="15.0" fill="rgb(244,28,24)" rx="2" ry="2" />
<text  x="1111.92" y="255.5" ></text>
</g>
<g >
<title>register_ftrace_function (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="229" width="3.1" height="15.0" fill="rgb(216,66,46)" rx="2" ry="2" />
<text  x="1188.28" y="239.5" ></text>
</g>
<g >
<title>n_tty_write (257,500,000 samples, 68.71%)</title><rect x="177.7" y="293" width="810.8" height="15.0" fill="rgb(231,196,27)" rx="2" ry="2" />
<text  x="180.67" y="303.5" >n_tty_write</text>
</g>
<g >
<title>pty_write (2,000,000 samples, 0.53%)</title><rect x="336.7" y="277" width="6.3" height="15.0" fill="rgb(208,13,6)" rx="2" ry="2" />
<text  x="339.68" y="287.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (7,000,000 samples, 1.87%)</title><rect x="1001.9" y="357" width="22.0" height="15.0" fill="rgb(252,218,18)" rx="2" ry="2" />
<text  x="1004.86" y="367.5" >s..</text>
</g>
<g >
<title>kallsyms_expand_symbol.constprop.0 (250,000 samples, 0.07%)</title><rect x="1184.5" y="229" width="0.8" height="15.0" fill="rgb(241,117,8)" rx="2" ry="2" />
<text  x="1187.49" y="239.5" ></text>
</g>
<g >
<title>__fget_light (2,500,000 samples, 0.67%)</title><rect x="97.4" y="325" width="7.9" height="15.0" fill="rgb(242,72,45)" rx="2" ry="2" />
<text  x="100.38" y="335.5" ></text>
</g>
<g >
<title>jump_label_text_reserved (250,000 samples, 0.07%)</title><rect x="1183.7" y="261" width="0.8" height="15.0" fill="rgb(248,149,26)" rx="2" ry="2" />
<text  x="1186.70" y="271.5" ></text>
</g>
<g >
<title>libbpf_add_mem (750,000 samples, 0.20%)</title><rect x="1099.5" y="405" width="2.3" height="15.0" fill="rgb(237,59,21)" rx="2" ry="2" />
<text  x="1102.47" y="415.5" ></text>
</g>
<g >
<title>ftrace_run_update_code (1,000,000 samples, 0.27%)</title><rect x="1185.3" y="197" width="3.1" height="15.0" fill="rgb(245,139,0)" rx="2" ry="2" />
<text  x="1188.28" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,000,000 samples, 0.80%)</title><rect x="1102.6" y="389" width="9.5" height="15.0" fill="rgb(210,35,51)" rx="2" ry="2" />
<text  x="1105.62" y="399.5" ></text>
</g>
<g >
<title>lru_cache_add (250,000 samples, 0.07%)</title><rect x="1036.5" y="309" width="0.8" height="15.0" fill="rgb(254,139,41)" rx="2" ry="2" />
<text  x="1039.50" y="319.5" ></text>
</g>
</g>
</svg>
